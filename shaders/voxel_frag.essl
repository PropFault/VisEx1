#ifndef GL_ES
#version 330 es
#endif

precision highp sampler3D;
uniform sampler3D map;
uniform vec3 boundingBox[2];
uniform float samples;

out vec4 fragColor;
varying vec3 vDir;
varying vec3 vOrigin;

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

void main(){
    vec3 dir = normalize(vDir);
    vec3 inv_dir = 1.0 / dir;
    float maxRead = 0.0;

    vec3 sides = boundingBox[1] - boundingBox[0];


    // slab
    vec3 t1 = (boundingBox[0] - vOrigin) * inv_dir;
    vec3 t2 = (boundingBox[1] - vOrigin) * inv_dir;

    vec3 tminv = min(t1, t2);
    vec3 tmaxv = max(t1, t2);

    float tmin = min(tminv.x, (tminv.y, tminv.z));
    float tmax = max(tmaxv.x, (tmaxv.y, tmaxv.z));

    if(tmin > tmax){
        discard;
    }
    tmin = max(tmin, 0.0); // ensure bigger than 0
    vec3 cursor = vOrigin + tmin * dir;

    // Add some noise to the cursor
    float r = rand(vec2(gl_FragCoord.x * 1000.0, gl_FragCoord.y * 2000.0) / sin(gl_FragCoord.z / 10.0));
    dir += dir * r;
    cursor += dir * r;

    float span = (tmax - tmin);
    float delta = span / samples; // 2000 samples


    for(float c = tmin; c < tmax; c += delta){
        vec3 p =  (cursor / sides) + 0.5;
        if(p.x >= 0.0 && p.x >= 0.0 && p.z >= 0.0
            && p.x <= 1.0 && p.y <= 1.0 && p.z <= 1.0){ // if p is within texture
            float curRead = texture(map, p).r;
            if(curRead > maxRead){
                maxRead = curRead;
            }
            if(maxRead > 0.98){ // bright enough.
                break;
            }
        }
        cursor += dir * delta;
    }


    fragColor = vec4(maxRead, maxRead, maxRead, 1.0);
}